// Package auvik provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/stellaraf/go-auvik version (devel) DO NOT EDIT.
package auvik

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AlertDismissSingle request
	AlertDismissSingle(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleAlertInfo request
	ReadMultipleAlertInfo(ctx context.Context, params *ReadMultipleAlertInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleAlertInfo request
	ReadSingleAlertInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyCredentials request
	VerifyCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadClientUsage request
	ReadClientUsage(ctx context.Context, params *ReadClientUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadDeviceUsage request
	ReadDeviceUsage(ctx context.Context, id string, params *ReadDeviceUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleComponentInfo request
	ReadMultipleComponentInfo(ctx context.Context, params *ReadMultipleComponentInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleComponentInfo request
	ReadSingleComponentInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleConfigurations request
	ReadMultipleConfigurations(ctx context.Context, params *ReadMultipleConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleConfiguration request
	ReadSingleConfiguration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleDeviceDetails request
	ReadMultipleDeviceDetails(ctx context.Context, params *ReadMultipleDeviceDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleDeviceExtendedDetail request
	ReadMultipleDeviceExtendedDetail(ctx context.Context, params *ReadMultipleDeviceExtendedDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleDeviceExtendedDetail request
	ReadSingleDeviceExtendedDetail(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleDeviceDetails request
	ReadSingleDeviceDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleDeviceInfo request
	ReadMultipleDeviceInfo(ctx context.Context, params *ReadMultipleDeviceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleDeviceInfo request
	ReadSingleDeviceInfo(ctx context.Context, id string, params *ReadSingleDeviceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleDeviceLifecycle request
	ReadMultipleDeviceLifecycle(ctx context.Context, params *ReadMultipleDeviceLifecycleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleDeviceLifecycle request
	ReadSingleDeviceLifecycle(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleDeviceWarranty request
	ReadMultipleDeviceWarranty(ctx context.Context, params *ReadMultipleDeviceWarrantyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleDeviceWarranty request
	ReadSingleDeviceWarranty(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleEntityAudit request
	ReadMultipleEntityAudit(ctx context.Context, params *ReadMultipleEntityAuditParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleEntityAudit request
	ReadSingleEntityAudit(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleEntityNote request
	ReadMultipleEntityNote(ctx context.Context, params *ReadMultipleEntityNoteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleEntityNote request
	ReadSingleEntityNote(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleInterfaceInfo request
	ReadMultipleInterfaceInfo(ctx context.Context, params *ReadMultipleInterfaceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleInterfaceInfo request
	ReadSingleInterfaceInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleNetworkDetails request
	ReadMultipleNetworkDetails(ctx context.Context, params *ReadMultipleNetworkDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleNetworkDetails request
	ReadSingleNetworkDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleNetworkInfo request
	ReadMultipleNetworkInfo(ctx context.Context, params *ReadMultipleNetworkInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleNetworkInfo request
	ReadSingleNetworkInfo(ctx context.Context, id string, params *ReadSingleNetworkInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleSnmpPollerSettings request
	ReadMultipleSnmpPollerSettings(ctx context.Context, params *ReadMultipleSnmpPollerSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSnmpPollerSettingSingle request
	ReadSnmpPollerSettingSingle(ctx context.Context, snmpPollerSettingId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleSnmpPollerSettingDevices request
	ReadMultipleSnmpPollerSettingDevices(ctx context.Context, snmpPollerSettingId string, params *ReadMultipleSnmpPollerSettingDevicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadComponentStatistics request
	ReadComponentStatistics(ctx context.Context, componentType ReadComponentStatisticsParamsComponentType, statId ReadComponentStatisticsParamsStatId, params *ReadComponentStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadDeviceStatistics request
	ReadDeviceStatistics(ctx context.Context, statId ReadDeviceStatisticsParamsStatId, params *ReadDeviceStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadDeviceAvailabilityStatistics request
	ReadDeviceAvailabilityStatistics(ctx context.Context, statId ReadDeviceAvailabilityStatisticsParamsStatId, params *ReadDeviceAvailabilityStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadInterfaceStatistics request
	ReadInterfaceStatistics(ctx context.Context, statId ReadInterfaceStatisticsParamsStatId, params *ReadInterfaceStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadOidStatistics request
	ReadOidStatistics(ctx context.Context, statId ReadOidStatisticsParamsStatId, params *ReadOidStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadServiceStatistics request
	ReadServiceStatistics(ctx context.Context, statId ReadServiceStatisticsParamsStatId, params *ReadServiceStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleSnmpPollerSettingIntHistory request
	ReadMultipleSnmpPollerSettingIntHistory(ctx context.Context, params *ReadMultipleSnmpPollerSettingIntHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleSnmpPollerSettingStringHistory request
	ReadMultipleSnmpPollerSettingStringHistory(ctx context.Context, params *ReadMultipleSnmpPollerSettingStringHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleTenants request
	ReadMultipleTenants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadMultipleTenantsDetail request
	ReadMultipleTenantsDetail(ctx context.Context, params *ReadMultipleTenantsDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadSingleTenantsDetail request
	ReadSingleTenantsDetail(ctx context.Context, id string, params *ReadSingleTenantsDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AlertDismissSingle(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAlertDismissSingleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleAlertInfo(ctx context.Context, params *ReadMultipleAlertInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleAlertInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleAlertInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleAlertInfoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyCredentials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyCredentialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadClientUsage(ctx context.Context, params *ReadClientUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadClientUsageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadDeviceUsage(ctx context.Context, id string, params *ReadDeviceUsageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadDeviceUsageRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleComponentInfo(ctx context.Context, params *ReadMultipleComponentInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleComponentInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleComponentInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleComponentInfoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleConfigurations(ctx context.Context, params *ReadMultipleConfigurationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleConfigurationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleConfiguration(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleConfigurationRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleDeviceDetails(ctx context.Context, params *ReadMultipleDeviceDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleDeviceDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleDeviceExtendedDetail(ctx context.Context, params *ReadMultipleDeviceExtendedDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleDeviceExtendedDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleDeviceExtendedDetail(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleDeviceExtendedDetailRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleDeviceDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleDeviceDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleDeviceInfo(ctx context.Context, params *ReadMultipleDeviceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleDeviceInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleDeviceInfo(ctx context.Context, id string, params *ReadSingleDeviceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleDeviceInfoRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleDeviceLifecycle(ctx context.Context, params *ReadMultipleDeviceLifecycleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleDeviceLifecycleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleDeviceLifecycle(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleDeviceLifecycleRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleDeviceWarranty(ctx context.Context, params *ReadMultipleDeviceWarrantyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleDeviceWarrantyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleDeviceWarranty(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleDeviceWarrantyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleEntityAudit(ctx context.Context, params *ReadMultipleEntityAuditParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleEntityAuditRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleEntityAudit(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleEntityAuditRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleEntityNote(ctx context.Context, params *ReadMultipleEntityNoteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleEntityNoteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleEntityNote(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleEntityNoteRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleInterfaceInfo(ctx context.Context, params *ReadMultipleInterfaceInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleInterfaceInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleInterfaceInfo(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleInterfaceInfoRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleNetworkDetails(ctx context.Context, params *ReadMultipleNetworkDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleNetworkDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleNetworkDetails(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleNetworkDetailsRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleNetworkInfo(ctx context.Context, params *ReadMultipleNetworkInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleNetworkInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleNetworkInfo(ctx context.Context, id string, params *ReadSingleNetworkInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleNetworkInfoRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleSnmpPollerSettings(ctx context.Context, params *ReadMultipleSnmpPollerSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleSnmpPollerSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSnmpPollerSettingSingle(ctx context.Context, snmpPollerSettingId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSnmpPollerSettingSingleRequest(c.Server, snmpPollerSettingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleSnmpPollerSettingDevices(ctx context.Context, snmpPollerSettingId string, params *ReadMultipleSnmpPollerSettingDevicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleSnmpPollerSettingDevicesRequest(c.Server, snmpPollerSettingId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadComponentStatistics(ctx context.Context, componentType ReadComponentStatisticsParamsComponentType, statId ReadComponentStatisticsParamsStatId, params *ReadComponentStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadComponentStatisticsRequest(c.Server, componentType, statId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadDeviceStatistics(ctx context.Context, statId ReadDeviceStatisticsParamsStatId, params *ReadDeviceStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadDeviceStatisticsRequest(c.Server, statId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadDeviceAvailabilityStatistics(ctx context.Context, statId ReadDeviceAvailabilityStatisticsParamsStatId, params *ReadDeviceAvailabilityStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadDeviceAvailabilityStatisticsRequest(c.Server, statId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadInterfaceStatistics(ctx context.Context, statId ReadInterfaceStatisticsParamsStatId, params *ReadInterfaceStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadInterfaceStatisticsRequest(c.Server, statId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadOidStatistics(ctx context.Context, statId ReadOidStatisticsParamsStatId, params *ReadOidStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadOidStatisticsRequest(c.Server, statId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadServiceStatistics(ctx context.Context, statId ReadServiceStatisticsParamsStatId, params *ReadServiceStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadServiceStatisticsRequest(c.Server, statId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleSnmpPollerSettingIntHistory(ctx context.Context, params *ReadMultipleSnmpPollerSettingIntHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleSnmpPollerSettingIntHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleSnmpPollerSettingStringHistory(ctx context.Context, params *ReadMultipleSnmpPollerSettingStringHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleSnmpPollerSettingStringHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleTenants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleTenantsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadMultipleTenantsDetail(ctx context.Context, params *ReadMultipleTenantsDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadMultipleTenantsDetailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadSingleTenantsDetail(ctx context.Context, id string, params *ReadSingleTenantsDetailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadSingleTenantsDetailRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAlertDismissSingleRequest generates requests for AlertDismissSingle
func NewAlertDismissSingleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/dismiss/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleAlertInfoRequest generates requests for ReadMultipleAlertInfo
func NewReadMultipleAlertInfoRequest(server string, params *ReadMultipleAlertInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/history/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterAlertDefinitionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[alertDefinitionId]", runtime.ParamLocationQuery, *params.FilterAlertDefinitionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAlertSpecificationId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[alertSpecificationId]", runtime.ParamLocationQuery, *params.FilterAlertSpecificationId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSeverity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[severity]", runtime.ParamLocationQuery, *params.FilterSeverity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEntityId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[entityId]", runtime.ParamLocationQuery, *params.FilterEntityId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDismissed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[dismissed]", runtime.ParamLocationQuery, *params.FilterDismissed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDispatched != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[dispatched]", runtime.ParamLocationQuery, *params.FilterDispatched); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDetectedTimeAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detectedTimeAfter]", runtime.ParamLocationQuery, *params.FilterDetectedTimeAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDetectedTimeBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[detectedTimeBefore]", runtime.ParamLocationQuery, *params.FilterDetectedTimeBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleAlertInfoRequest generates requests for ReadSingleAlertInfo
func NewReadSingleAlertInfoRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alert/history/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifyCredentialsRequest generates requests for VerifyCredentials
func NewVerifyCredentialsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authentication/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadClientUsageRequest generates requests for ReadClientUsage
func NewReadClientUsageRequest(server string, params *ReadClientUsageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/usage/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromDate]", runtime.ParamLocationQuery, params.FilterFromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruDate]", runtime.ParamLocationQuery, params.FilterThruDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadDeviceUsageRequest generates requests for ReadDeviceUsage
func NewReadDeviceUsageRequest(server string, id string, params *ReadDeviceUsageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/billing/usage/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromDate]", runtime.ParamLocationQuery, params.FilterFromDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruDate]", runtime.ParamLocationQuery, params.FilterThruDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleComponentInfoRequest generates requests for ReadMultipleComponentInfo
func NewReadMultipleComponentInfoRequest(server string, params *ReadMultipleComponentInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/component/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceId]", runtime.ParamLocationQuery, *params.FilterDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDeviceName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceName]", runtime.ParamLocationQuery, *params.FilterDeviceName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCurrentStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[currentStatus]", runtime.ParamLocationQuery, *params.FilterCurrentStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleComponentInfoRequest generates requests for ReadSingleComponentInfo
func NewReadSingleComponentInfoRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/component/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleConfigurationsRequest generates requests for ReadMultipleConfigurations
func NewReadMultipleConfigurationsRequest(server string, params *ReadMultipleConfigurationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/configuration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceId]", runtime.ParamLocationQuery, *params.FilterDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterBackupTimeAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backupTimeAfter]", runtime.ParamLocationQuery, *params.FilterBackupTimeAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterBackupTimeBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[backupTimeBefore]", runtime.ParamLocationQuery, *params.FilterBackupTimeBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterIsRunning != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[isRunning]", runtime.ParamLocationQuery, *params.FilterIsRunning); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleConfigurationRequest generates requests for ReadSingleConfiguration
func NewReadSingleConfigurationRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/configuration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleDeviceDetailsRequest generates requests for ReadMultipleDeviceDetails
func NewReadMultipleDeviceDetailsRequest(server string, params *ReadMultipleDeviceDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterManageStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[manageStatus]", runtime.ParamLocationQuery, *params.FilterManageStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDiscoverySNMP != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[discoverySNMP]", runtime.ParamLocationQuery, *params.FilterDiscoverySNMP); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDiscoveryWMI != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[discoveryWMI]", runtime.ParamLocationQuery, *params.FilterDiscoveryWMI); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDiscoveryLogin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[discoveryLogin]", runtime.ParamLocationQuery, *params.FilterDiscoveryLogin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDiscoveryVMware != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[discoveryVMware]", runtime.ParamLocationQuery, *params.FilterDiscoveryVMware); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterTrafficInsightsStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[trafficInsightsStatus]", runtime.ParamLocationQuery, *params.FilterTrafficInsightsStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleDeviceExtendedDetailRequest generates requests for ReadMultipleDeviceExtendedDetail
func NewReadMultipleDeviceExtendedDetailRequest(server string, params *ReadMultipleDeviceExtendedDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/detail/extended")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceType]", runtime.ParamLocationQuery, params.FilterDeviceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterNotSeenSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[notSeenSince]", runtime.ParamLocationQuery, *params.FilterNotSeenSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleDeviceExtendedDetailRequest generates requests for ReadSingleDeviceExtendedDetail
func NewReadSingleDeviceExtendedDetailRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/detail/extended/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleDeviceDetailsRequest generates requests for ReadSingleDeviceDetails
func NewReadSingleDeviceDetailsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleDeviceInfoRequest generates requests for ReadMultipleDeviceInfo
func NewReadMultipleDeviceInfoRequest(server string, params *ReadMultipleDeviceInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterNetworks != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[networks]", runtime.ParamLocationQuery, *params.FilterNetworks); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDeviceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceType]", runtime.ParamLocationQuery, *params.FilterDeviceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMakeModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[makeModel]", runtime.ParamLocationQuery, *params.FilterMakeModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterVendorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[vendorName]", runtime.ParamLocationQuery, *params.FilterVendorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOnlineStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[onlineStatus]", runtime.ParamLocationQuery, *params.FilterOnlineStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterNotSeenSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[notSeenSince]", runtime.ParamLocationQuery, *params.FilterNotSeenSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsDeviceDetail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields[deviceDetail]", runtime.ParamLocationQuery, *params.FieldsDeviceDetail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleDeviceInfoRequest generates requests for ReadSingleDeviceInfo
func NewReadSingleDeviceInfoRequest(server string, id string, params *ReadSingleDeviceInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsDeviceDetail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields[deviceDetail]", runtime.ParamLocationQuery, *params.FieldsDeviceDetail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleDeviceLifecycleRequest generates requests for ReadMultipleDeviceLifecycle
func NewReadMultipleDeviceLifecycleRequest(server string, params *ReadMultipleDeviceLifecycleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/lifecycle")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterSalesAvailability != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[salesAvailability]", runtime.ParamLocationQuery, *params.FilterSalesAvailability); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSoftwareMaintenanceStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[softwareMaintenanceStatus]", runtime.ParamLocationQuery, *params.FilterSoftwareMaintenanceStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSecuritySoftwareMaintenanceStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[securitySoftwareMaintenanceStatus]", runtime.ParamLocationQuery, *params.FilterSecuritySoftwareMaintenanceStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLastSupportStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[lastSupportStatus]", runtime.ParamLocationQuery, *params.FilterLastSupportStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleDeviceLifecycleRequest generates requests for ReadSingleDeviceLifecycle
func NewReadSingleDeviceLifecycleRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/lifecycle/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleDeviceWarrantyRequest generates requests for ReadMultipleDeviceWarranty
func NewReadMultipleDeviceWarrantyRequest(server string, params *ReadMultipleDeviceWarrantyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/warranty")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterCoveredUnderWarranty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[coveredUnderWarranty]", runtime.ParamLocationQuery, *params.FilterCoveredUnderWarranty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCoveredUnderService != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[coveredUnderService]", runtime.ParamLocationQuery, *params.FilterCoveredUnderService); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleDeviceWarrantyRequest generates requests for ReadSingleDeviceWarranty
func NewReadSingleDeviceWarrantyRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/device/warranty/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleEntityAuditRequest generates requests for ReadMultipleEntityAudit
func NewReadMultipleEntityAuditRequest(server string, params *ReadMultipleEntityAuditParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/entity/audit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[user]", runtime.ParamLocationQuery, *params.FilterUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCategory != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[category]", runtime.ParamLocationQuery, *params.FilterCategory); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[status]", runtime.ParamLocationQuery, *params.FilterStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleEntityAuditRequest generates requests for ReadSingleEntityAudit
func NewReadSingleEntityAuditRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/entity/audit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleEntityNoteRequest generates requests for ReadMultipleEntityNote
func NewReadMultipleEntityNoteRequest(server string, params *ReadMultipleEntityNoteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/entity/note")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterEntityId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[entityId]", runtime.ParamLocationQuery, *params.FilterEntityId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEntityType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[entityType]", runtime.ParamLocationQuery, *params.FilterEntityType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterEntityName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[entityName]", runtime.ParamLocationQuery, *params.FilterEntityName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterLastModifiedBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[lastModifiedBy]", runtime.ParamLocationQuery, *params.FilterLastModifiedBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleEntityNoteRequest generates requests for ReadSingleEntityNote
func NewReadSingleEntityNoteRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/entity/note/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleInterfaceInfoRequest generates requests for ReadMultipleInterfaceInfo
func NewReadMultipleInterfaceInfoRequest(server string, params *ReadMultipleInterfaceInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/interface/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterInterfaceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interfaceType]", runtime.ParamLocationQuery, *params.FilterInterfaceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterParentDevice != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[parentDevice]", runtime.ParamLocationQuery, *params.FilterParentDevice); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterAdminStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[adminStatus]", runtime.ParamLocationQuery, *params.FilterAdminStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOperationalStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[operationalStatus]", runtime.ParamLocationQuery, *params.FilterOperationalStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleInterfaceInfoRequest generates requests for ReadSingleInterfaceInfo
func NewReadSingleInterfaceInfoRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/interface/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleNetworkDetailsRequest generates requests for ReadMultipleNetworkDetails
func NewReadMultipleNetworkDetailsRequest(server string, params *ReadMultipleNetworkDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/network/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterNetworkType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[networkType]", runtime.ParamLocationQuery, *params.FilterNetworkType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterScanStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[scanStatus]", runtime.ParamLocationQuery, *params.FilterScanStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDevices != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[devices]", runtime.ParamLocationQuery, *params.FilterDevices); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterScope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[scope]", runtime.ParamLocationQuery, *params.FilterScope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleNetworkDetailsRequest generates requests for ReadSingleNetworkDetails
func NewReadSingleNetworkDetailsRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/network/detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleNetworkInfoRequest generates requests for ReadMultipleNetworkInfo
func NewReadMultipleNetworkInfoRequest(server string, params *ReadMultipleNetworkInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/network/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterNetworkType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[networkType]", runtime.ParamLocationQuery, *params.FilterNetworkType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterScanStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[scanStatus]", runtime.ParamLocationQuery, *params.FilterScanStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDevices != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[devices]", runtime.ParamLocationQuery, *params.FilterDevices); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsNetworkDetail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields[networkDetail]", runtime.ParamLocationQuery, *params.FieldsNetworkDetail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleNetworkInfoRequest generates requests for ReadSingleNetworkInfo
func NewReadSingleNetworkInfoRequest(server string, id string, params *ReadSingleNetworkInfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/inventory/network/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Include != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include", runtime.ParamLocationQuery, *params.Include); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FieldsNetworkDetail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields[networkDetail]", runtime.ParamLocationQuery, *params.FieldsNetworkDetail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleSnmpPollerSettingsRequest generates requests for ReadMultipleSnmpPollerSettings
func NewReadMultipleSnmpPollerSettingsRequest(server string, params *ReadMultipleSnmpPollerSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/snmppoller")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, params.Tenants); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceId]", runtime.ParamLocationQuery, *params.FilterDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterUseAs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[useAs]", runtime.ParamLocationQuery, *params.FilterUseAs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDeviceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceType]", runtime.ParamLocationQuery, *params.FilterDeviceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMakeModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[makeModel]", runtime.ParamLocationQuery, *params.FilterMakeModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterVendorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[vendorName]", runtime.ParamLocationQuery, *params.FilterVendorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[oid]", runtime.ParamLocationQuery, *params.FilterOid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[name]", runtime.ParamLocationQuery, *params.FilterName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSnmpPollerSettingSingleRequest generates requests for ReadSnmpPollerSettingSingle
func NewReadSnmpPollerSettingSingleRequest(server string, snmpPollerSettingId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snmpPollerSettingId", runtime.ParamLocationPath, snmpPollerSettingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/snmppoller/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleSnmpPollerSettingDevicesRequest generates requests for ReadMultipleSnmpPollerSettingDevices
func NewReadMultipleSnmpPollerSettingDevicesRequest(server string, snmpPollerSettingId string, params *ReadMultipleSnmpPollerSettingDevicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "snmpPollerSettingId", runtime.ParamLocationPath, snmpPollerSettingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/snmppoller/%s/devices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, params.Tenants); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterOnlineStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[onlineStatus]", runtime.ParamLocationQuery, *params.FilterOnlineStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterModifiedAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[modifiedAfter]", runtime.ParamLocationQuery, *params.FilterModifiedAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterNotSeenSince != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[notSeenSince]", runtime.ParamLocationQuery, *params.FilterNotSeenSince); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDeviceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceType]", runtime.ParamLocationQuery, *params.FilterDeviceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterMakeModel != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[makeModel]", runtime.ParamLocationQuery, *params.FilterMakeModel); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterVendorName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[vendorName]", runtime.ParamLocationQuery, *params.FilterVendorName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadComponentStatisticsRequest generates requests for ReadComponentStatistics
func NewReadComponentStatisticsRequest(server string, componentType ReadComponentStatisticsParamsComponentType, statId ReadComponentStatisticsParamsStatId, params *ReadComponentStatisticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "componentType", runtime.ParamLocationPath, componentType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "statId", runtime.ParamLocationPath, statId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/component/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromTime]", runtime.ParamLocationQuery, params.FilterFromTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterThruTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruTime]", runtime.ParamLocationQuery, *params.FilterThruTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interval]", runtime.ParamLocationQuery, params.FilterInterval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterComponentId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[componentId]", runtime.ParamLocationQuery, *params.FilterComponentId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterParentDevice != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[parentDevice]", runtime.ParamLocationQuery, *params.FilterParentDevice); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadDeviceStatisticsRequest generates requests for ReadDeviceStatistics
func NewReadDeviceStatisticsRequest(server string, statId ReadDeviceStatisticsParamsStatId, params *ReadDeviceStatisticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statId", runtime.ParamLocationPath, statId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/device/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromTime]", runtime.ParamLocationQuery, params.FilterFromTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterThruTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruTime]", runtime.ParamLocationQuery, *params.FilterThruTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interval]", runtime.ParamLocationQuery, params.FilterInterval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterDeviceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceType]", runtime.ParamLocationQuery, *params.FilterDeviceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceId]", runtime.ParamLocationQuery, *params.FilterDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadDeviceAvailabilityStatisticsRequest generates requests for ReadDeviceAvailabilityStatistics
func NewReadDeviceAvailabilityStatisticsRequest(server string, statId ReadDeviceAvailabilityStatisticsParamsStatId, params *ReadDeviceAvailabilityStatisticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statId", runtime.ParamLocationPath, statId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/deviceAvailability/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromTime]", runtime.ParamLocationQuery, params.FilterFromTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterThruTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruTime]", runtime.ParamLocationQuery, *params.FilterThruTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interval]", runtime.ParamLocationQuery, params.FilterInterval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterDeviceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceType]", runtime.ParamLocationQuery, *params.FilterDeviceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceId]", runtime.ParamLocationQuery, *params.FilterDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadInterfaceStatisticsRequest generates requests for ReadInterfaceStatistics
func NewReadInterfaceStatisticsRequest(server string, statId ReadInterfaceStatisticsParamsStatId, params *ReadInterfaceStatisticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statId", runtime.ParamLocationPath, statId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/interface/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromTime]", runtime.ParamLocationQuery, params.FilterFromTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterThruTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruTime]", runtime.ParamLocationQuery, *params.FilterThruTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interval]", runtime.ParamLocationQuery, params.FilterInterval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterInterfaceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interfaceType]", runtime.ParamLocationQuery, *params.FilterInterfaceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterInterfaceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interfaceId]", runtime.ParamLocationQuery, *params.FilterInterfaceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterParentDevice != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[parentDevice]", runtime.ParamLocationQuery, *params.FilterParentDevice); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadOidStatisticsRequest generates requests for ReadOidStatistics
func NewReadOidStatisticsRequest(server string, statId ReadOidStatisticsParamsStatId, params *ReadOidStatisticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statId", runtime.ParamLocationPath, statId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/oid/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FilterDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceId]", runtime.ParamLocationQuery, *params.FilterDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterDeviceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceType]", runtime.ParamLocationQuery, *params.FilterDeviceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterOid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[oid]", runtime.ParamLocationQuery, *params.FilterOid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadServiceStatisticsRequest generates requests for ReadServiceStatistics
func NewReadServiceStatisticsRequest(server string, statId ReadServiceStatisticsParamsStatId, params *ReadServiceStatisticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "statId", runtime.ParamLocationPath, statId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/service/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromTime]", runtime.ParamLocationQuery, params.FilterFromTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterThruTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruTime]", runtime.ParamLocationQuery, *params.FilterThruTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interval]", runtime.ParamLocationQuery, params.FilterInterval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterServiceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[serviceId]", runtime.ParamLocationQuery, *params.FilterServiceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, *params.Tenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleSnmpPollerSettingIntHistoryRequest generates requests for ReadMultipleSnmpPollerSettingIntHistory
func NewReadMultipleSnmpPollerSettingIntHistoryRequest(server string, params *ReadMultipleSnmpPollerSettingIntHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/snmppoller/int")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromTime]", runtime.ParamLocationQuery, params.FilterFromTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterThruTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruTime]", runtime.ParamLocationQuery, *params.FilterThruTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[interval]", runtime.ParamLocationQuery, params.FilterInterval); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, params.Tenants); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceId]", runtime.ParamLocationQuery, *params.FilterDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSnmpPollerSettingId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[snmpPollerSettingId]", runtime.ParamLocationQuery, *params.FilterSnmpPollerSettingId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleSnmpPollerSettingStringHistoryRequest generates requests for ReadMultipleSnmpPollerSettingStringHistory
func NewReadMultipleSnmpPollerSettingStringHistoryRequest(server string, params *ReadMultipleSnmpPollerSettingStringHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stat/snmppoller/string")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[fromTime]", runtime.ParamLocationQuery, params.FilterFromTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterThruTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[thruTime]", runtime.ParamLocationQuery, *params.FilterThruTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterCompact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[compact]", runtime.ParamLocationQuery, *params.FilterCompact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenants", runtime.ParamLocationQuery, params.Tenants); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterDeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[deviceId]", runtime.ParamLocationQuery, *params.FilterDeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FilterSnmpPollerSettingId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[snmpPollerSettingId]", runtime.ParamLocationQuery, *params.FilterSnmpPollerSettingId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageFirst != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[first]", runtime.ParamLocationQuery, *params.PageFirst); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageAfter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[after]", runtime.ParamLocationQuery, *params.PageAfter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageLast != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[last]", runtime.ParamLocationQuery, *params.PageLast); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageBefore != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page[before]", runtime.ParamLocationQuery, *params.PageBefore); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleTenantsRequest generates requests for ReadMultipleTenants
func NewReadMultipleTenantsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadMultipleTenantsDetailRequest generates requests for ReadMultipleTenantsDetail
func NewReadMultipleTenantsDetailRequest(server string, params *ReadMultipleTenantsDetailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants/detail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantDomainPrefix", runtime.ParamLocationQuery, params.TenantDomainPrefix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.FilterAvailableTenants != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter[availableTenants]", runtime.ParamLocationQuery, *params.FilterAvailableTenants); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadSingleTenantsDetailRequest generates requests for ReadSingleTenantsDetail
func NewReadSingleTenantsDetailRequest(server string, id string, params *ReadSingleTenantsDetailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tenants/detail/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenantDomainPrefix", runtime.ParamLocationQuery, params.TenantDomainPrefix); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AlertDismissSingle request
	AlertDismissSingleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AlertDismissSingleResponse, error)

	// ReadMultipleAlertInfo request
	ReadMultipleAlertInfoWithResponse(ctx context.Context, params *ReadMultipleAlertInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleAlertInfoResponse, error)

	// ReadSingleAlertInfo request
	ReadSingleAlertInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleAlertInfoResponse, error)

	// VerifyCredentials request
	VerifyCredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VerifyCredentialsResponse, error)

	// ReadClientUsage request
	ReadClientUsageWithResponse(ctx context.Context, params *ReadClientUsageParams, reqEditors ...RequestEditorFn) (*ReadClientUsageResponse, error)

	// ReadDeviceUsage request
	ReadDeviceUsageWithResponse(ctx context.Context, id string, params *ReadDeviceUsageParams, reqEditors ...RequestEditorFn) (*ReadDeviceUsageResponse, error)

	// ReadMultipleComponentInfo request
	ReadMultipleComponentInfoWithResponse(ctx context.Context, params *ReadMultipleComponentInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleComponentInfoResponse, error)

	// ReadSingleComponentInfo request
	ReadSingleComponentInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleComponentInfoResponse, error)

	// ReadMultipleConfigurations request
	ReadMultipleConfigurationsWithResponse(ctx context.Context, params *ReadMultipleConfigurationsParams, reqEditors ...RequestEditorFn) (*ReadMultipleConfigurationsResponse, error)

	// ReadSingleConfiguration request
	ReadSingleConfigurationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleConfigurationResponse, error)

	// ReadMultipleDeviceDetails request
	ReadMultipleDeviceDetailsWithResponse(ctx context.Context, params *ReadMultipleDeviceDetailsParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceDetailsResponse, error)

	// ReadMultipleDeviceExtendedDetail request
	ReadMultipleDeviceExtendedDetailWithResponse(ctx context.Context, params *ReadMultipleDeviceExtendedDetailParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceExtendedDetailResponse, error)

	// ReadSingleDeviceExtendedDetail request
	ReadSingleDeviceExtendedDetailWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleDeviceExtendedDetailResponse, error)

	// ReadSingleDeviceDetails request
	ReadSingleDeviceDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleDeviceDetailsResponse, error)

	// ReadMultipleDeviceInfo request
	ReadMultipleDeviceInfoWithResponse(ctx context.Context, params *ReadMultipleDeviceInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceInfoResponse, error)

	// ReadSingleDeviceInfo request
	ReadSingleDeviceInfoWithResponse(ctx context.Context, id string, params *ReadSingleDeviceInfoParams, reqEditors ...RequestEditorFn) (*ReadSingleDeviceInfoResponse, error)

	// ReadMultipleDeviceLifecycle request
	ReadMultipleDeviceLifecycleWithResponse(ctx context.Context, params *ReadMultipleDeviceLifecycleParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceLifecycleResponse, error)

	// ReadSingleDeviceLifecycle request
	ReadSingleDeviceLifecycleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleDeviceLifecycleResponse, error)

	// ReadMultipleDeviceWarranty request
	ReadMultipleDeviceWarrantyWithResponse(ctx context.Context, params *ReadMultipleDeviceWarrantyParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceWarrantyResponse, error)

	// ReadSingleDeviceWarranty request
	ReadSingleDeviceWarrantyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleDeviceWarrantyResponse, error)

	// ReadMultipleEntityAudit request
	ReadMultipleEntityAuditWithResponse(ctx context.Context, params *ReadMultipleEntityAuditParams, reqEditors ...RequestEditorFn) (*ReadMultipleEntityAuditResponse, error)

	// ReadSingleEntityAudit request
	ReadSingleEntityAuditWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleEntityAuditResponse, error)

	// ReadMultipleEntityNote request
	ReadMultipleEntityNoteWithResponse(ctx context.Context, params *ReadMultipleEntityNoteParams, reqEditors ...RequestEditorFn) (*ReadMultipleEntityNoteResponse, error)

	// ReadSingleEntityNote request
	ReadSingleEntityNoteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleEntityNoteResponse, error)

	// ReadMultipleInterfaceInfo request
	ReadMultipleInterfaceInfoWithResponse(ctx context.Context, params *ReadMultipleInterfaceInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleInterfaceInfoResponse, error)

	// ReadSingleInterfaceInfo request
	ReadSingleInterfaceInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleInterfaceInfoResponse, error)

	// ReadMultipleNetworkDetails request
	ReadMultipleNetworkDetailsWithResponse(ctx context.Context, params *ReadMultipleNetworkDetailsParams, reqEditors ...RequestEditorFn) (*ReadMultipleNetworkDetailsResponse, error)

	// ReadSingleNetworkDetails request
	ReadSingleNetworkDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleNetworkDetailsResponse, error)

	// ReadMultipleNetworkInfo request
	ReadMultipleNetworkInfoWithResponse(ctx context.Context, params *ReadMultipleNetworkInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleNetworkInfoResponse, error)

	// ReadSingleNetworkInfo request
	ReadSingleNetworkInfoWithResponse(ctx context.Context, id string, params *ReadSingleNetworkInfoParams, reqEditors ...RequestEditorFn) (*ReadSingleNetworkInfoResponse, error)

	// ReadMultipleSnmpPollerSettings request
	ReadMultipleSnmpPollerSettingsWithResponse(ctx context.Context, params *ReadMultipleSnmpPollerSettingsParams, reqEditors ...RequestEditorFn) (*ReadMultipleSnmpPollerSettingsResponse, error)

	// ReadSnmpPollerSettingSingle request
	ReadSnmpPollerSettingSingleWithResponse(ctx context.Context, snmpPollerSettingId string, reqEditors ...RequestEditorFn) (*ReadSnmpPollerSettingSingleResponse, error)

	// ReadMultipleSnmpPollerSettingDevices request
	ReadMultipleSnmpPollerSettingDevicesWithResponse(ctx context.Context, snmpPollerSettingId string, params *ReadMultipleSnmpPollerSettingDevicesParams, reqEditors ...RequestEditorFn) (*ReadMultipleSnmpPollerSettingDevicesResponse, error)

	// ReadComponentStatistics request
	ReadComponentStatisticsWithResponse(ctx context.Context, componentType ReadComponentStatisticsParamsComponentType, statId ReadComponentStatisticsParamsStatId, params *ReadComponentStatisticsParams, reqEditors ...RequestEditorFn) (*ReadComponentStatisticsResponse, error)

	// ReadDeviceStatistics request
	ReadDeviceStatisticsWithResponse(ctx context.Context, statId ReadDeviceStatisticsParamsStatId, params *ReadDeviceStatisticsParams, reqEditors ...RequestEditorFn) (*ReadDeviceStatisticsResponse, error)

	// ReadDeviceAvailabilityStatistics request
	ReadDeviceAvailabilityStatisticsWithResponse(ctx context.Context, statId ReadDeviceAvailabilityStatisticsParamsStatId, params *ReadDeviceAvailabilityStatisticsParams, reqEditors ...RequestEditorFn) (*ReadDeviceAvailabilityStatisticsResponse, error)

	// ReadInterfaceStatistics request
	ReadInterfaceStatisticsWithResponse(ctx context.Context, statId ReadInterfaceStatisticsParamsStatId, params *ReadInterfaceStatisticsParams, reqEditors ...RequestEditorFn) (*ReadInterfaceStatisticsResponse, error)

	// ReadOidStatistics request
	ReadOidStatisticsWithResponse(ctx context.Context, statId ReadOidStatisticsParamsStatId, params *ReadOidStatisticsParams, reqEditors ...RequestEditorFn) (*ReadOidStatisticsResponse, error)

	// ReadServiceStatistics request
	ReadServiceStatisticsWithResponse(ctx context.Context, statId ReadServiceStatisticsParamsStatId, params *ReadServiceStatisticsParams, reqEditors ...RequestEditorFn) (*ReadServiceStatisticsResponse, error)

	// ReadMultipleSnmpPollerSettingIntHistory request
	ReadMultipleSnmpPollerSettingIntHistoryWithResponse(ctx context.Context, params *ReadMultipleSnmpPollerSettingIntHistoryParams, reqEditors ...RequestEditorFn) (*ReadMultipleSnmpPollerSettingIntHistoryResponse, error)

	// ReadMultipleSnmpPollerSettingStringHistory request
	ReadMultipleSnmpPollerSettingStringHistoryWithResponse(ctx context.Context, params *ReadMultipleSnmpPollerSettingStringHistoryParams, reqEditors ...RequestEditorFn) (*ReadMultipleSnmpPollerSettingStringHistoryResponse, error)

	// ReadMultipleTenants request
	ReadMultipleTenantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadMultipleTenantsResponse, error)

	// ReadMultipleTenantsDetail request
	ReadMultipleTenantsDetailWithResponse(ctx context.Context, params *ReadMultipleTenantsDetailParams, reqEditors ...RequestEditorFn) (*ReadMultipleTenantsDetailResponse, error)

	// ReadSingleTenantsDetail request
	ReadSingleTenantsDetailWithResponse(ctx context.Context, id string, params *ReadSingleTenantsDetailParams, reqEditors ...RequestEditorFn) (*ReadSingleTenantsDetailResponse, error)
}

type AlertDismissSingleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
}

// Status returns HTTPResponse.Status
func (r AlertDismissSingleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AlertDismissSingleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleAlertInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertHistoryInfoReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleAlertInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleAlertInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleAlertInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *AlertHistoryInfoReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleAlertInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleAlertInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r VerifyCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadClientUsageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ClientUsageRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadClientUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadClientUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadDeviceUsageResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceUsageRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadDeviceUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadDeviceUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleComponentInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ComponentInfoReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleComponentInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleComponentInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleComponentInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ComponentInfoReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleComponentInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleComponentInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleConfigurationsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ConfigReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleConfigurationResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ConfigReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleDeviceDetailsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceDetailsReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleDeviceDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleDeviceDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleDeviceExtendedDetailResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceDetailsExtendedReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleDeviceExtendedDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleDeviceExtendedDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleDeviceExtendedDetailResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceDetailsExtendedReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleDeviceExtendedDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleDeviceExtendedDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleDeviceDetailsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceDetailsReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleDeviceDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleDeviceDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleDeviceInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceInfoReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleDeviceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleDeviceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleDeviceInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceInfoReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleDeviceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleDeviceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleDeviceLifecycleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceLifecycleReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleDeviceLifecycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleDeviceLifecycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleDeviceLifecycleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceLifecycleReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleDeviceLifecycleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleDeviceLifecycleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleDeviceWarrantyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceWarrantyReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleDeviceWarrantyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleDeviceWarrantyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleDeviceWarrantyResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceWarrantyReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleDeviceWarrantyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleDeviceWarrantyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleEntityAuditResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EntityAuditReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleEntityAuditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleEntityAuditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleEntityAuditResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EntityAuditReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleEntityAuditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleEntityAuditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleEntityNoteResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EntityNotesReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleEntityNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleEntityNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleEntityNoteResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *EntityNotesReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleEntityNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleEntityNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleInterfaceInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *InterfaceInfoReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleInterfaceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleInterfaceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleInterfaceInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *InterfaceInfoReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleInterfaceInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleInterfaceInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleNetworkDetailsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *NetworkDetailsReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleNetworkDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleNetworkDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleNetworkDetailsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *NetworkDetailsReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleNetworkDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleNetworkDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleNetworkInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *NetworkInfoReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleNetworkInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleNetworkInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleNetworkInfoResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *NetworkInfoReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleNetworkInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleNetworkInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleSnmpPollerSettingsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SnmpPollerSettingsRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleSnmpPollerSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleSnmpPollerSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSnmpPollerSettingSingleResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SnmpPollerSettingSingleRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSnmpPollerSettingSingleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSnmpPollerSettingSingleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleSnmpPollerSettingDevicesResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SnmpPollerSettingDevicesRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleSnmpPollerSettingDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleSnmpPollerSettingDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadComponentStatisticsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ComponentStatisticsRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadComponentStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadComponentStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadDeviceStatisticsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceStatisticsRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadDeviceStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadDeviceStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadDeviceAvailabilityStatisticsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceAvailabilityStatisticsRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadDeviceAvailabilityStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadDeviceAvailabilityStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadInterfaceStatisticsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *InterfaceStatisticsRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadInterfaceStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadInterfaceStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadOidStatisticsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *DeviceOidMonitorRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadOidStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadOidStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadServiceStatisticsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *ServiceStatisticsRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadServiceStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadServiceStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleSnmpPollerSettingIntHistoryResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SnmpPollerIntHistoryRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleSnmpPollerSettingIntHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleSnmpPollerSettingIntHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleSnmpPollerSettingStringHistoryResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *SnmpPollerStringHistoryRead
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleSnmpPollerSettingStringHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleSnmpPollerSettingStringHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleTenantsResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *UserTenantsReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleTenantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleTenantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadMultipleTenantsDetailResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TenantsDetailReadMultiple
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadMultipleTenantsDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadMultipleTenantsDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadSingleTenantsDetailResponse struct {
	Body                     []byte
	HTTPResponse             *http.Response
	ApplicationvndApiJSON200 *TenantsDetailReadSingle
	ApplicationvndApiJSON400 *BasicError
	ApplicationvndApiJSON403 *BasicError
	ApplicationvndApiJSON404 *BasicError
}

// Status returns HTTPResponse.Status
func (r ReadSingleTenantsDetailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadSingleTenantsDetailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AlertDismissSingleWithResponse request returning *AlertDismissSingleResponse
func (c *ClientWithResponses) AlertDismissSingleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AlertDismissSingleResponse, error) {
	rsp, err := c.AlertDismissSingle(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAlertDismissSingleResponse(rsp)
}

// ReadMultipleAlertInfoWithResponse request returning *ReadMultipleAlertInfoResponse
func (c *ClientWithResponses) ReadMultipleAlertInfoWithResponse(ctx context.Context, params *ReadMultipleAlertInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleAlertInfoResponse, error) {
	rsp, err := c.ReadMultipleAlertInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleAlertInfoResponse(rsp)
}

// ReadSingleAlertInfoWithResponse request returning *ReadSingleAlertInfoResponse
func (c *ClientWithResponses) ReadSingleAlertInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleAlertInfoResponse, error) {
	rsp, err := c.ReadSingleAlertInfo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleAlertInfoResponse(rsp)
}

// VerifyCredentialsWithResponse request returning *VerifyCredentialsResponse
func (c *ClientWithResponses) VerifyCredentialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VerifyCredentialsResponse, error) {
	rsp, err := c.VerifyCredentials(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyCredentialsResponse(rsp)
}

// ReadClientUsageWithResponse request returning *ReadClientUsageResponse
func (c *ClientWithResponses) ReadClientUsageWithResponse(ctx context.Context, params *ReadClientUsageParams, reqEditors ...RequestEditorFn) (*ReadClientUsageResponse, error) {
	rsp, err := c.ReadClientUsage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadClientUsageResponse(rsp)
}

// ReadDeviceUsageWithResponse request returning *ReadDeviceUsageResponse
func (c *ClientWithResponses) ReadDeviceUsageWithResponse(ctx context.Context, id string, params *ReadDeviceUsageParams, reqEditors ...RequestEditorFn) (*ReadDeviceUsageResponse, error) {
	rsp, err := c.ReadDeviceUsage(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadDeviceUsageResponse(rsp)
}

// ReadMultipleComponentInfoWithResponse request returning *ReadMultipleComponentInfoResponse
func (c *ClientWithResponses) ReadMultipleComponentInfoWithResponse(ctx context.Context, params *ReadMultipleComponentInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleComponentInfoResponse, error) {
	rsp, err := c.ReadMultipleComponentInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleComponentInfoResponse(rsp)
}

// ReadSingleComponentInfoWithResponse request returning *ReadSingleComponentInfoResponse
func (c *ClientWithResponses) ReadSingleComponentInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleComponentInfoResponse, error) {
	rsp, err := c.ReadSingleComponentInfo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleComponentInfoResponse(rsp)
}

// ReadMultipleConfigurationsWithResponse request returning *ReadMultipleConfigurationsResponse
func (c *ClientWithResponses) ReadMultipleConfigurationsWithResponse(ctx context.Context, params *ReadMultipleConfigurationsParams, reqEditors ...RequestEditorFn) (*ReadMultipleConfigurationsResponse, error) {
	rsp, err := c.ReadMultipleConfigurations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleConfigurationsResponse(rsp)
}

// ReadSingleConfigurationWithResponse request returning *ReadSingleConfigurationResponse
func (c *ClientWithResponses) ReadSingleConfigurationWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleConfigurationResponse, error) {
	rsp, err := c.ReadSingleConfiguration(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleConfigurationResponse(rsp)
}

// ReadMultipleDeviceDetailsWithResponse request returning *ReadMultipleDeviceDetailsResponse
func (c *ClientWithResponses) ReadMultipleDeviceDetailsWithResponse(ctx context.Context, params *ReadMultipleDeviceDetailsParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceDetailsResponse, error) {
	rsp, err := c.ReadMultipleDeviceDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleDeviceDetailsResponse(rsp)
}

// ReadMultipleDeviceExtendedDetailWithResponse request returning *ReadMultipleDeviceExtendedDetailResponse
func (c *ClientWithResponses) ReadMultipleDeviceExtendedDetailWithResponse(ctx context.Context, params *ReadMultipleDeviceExtendedDetailParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceExtendedDetailResponse, error) {
	rsp, err := c.ReadMultipleDeviceExtendedDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleDeviceExtendedDetailResponse(rsp)
}

// ReadSingleDeviceExtendedDetailWithResponse request returning *ReadSingleDeviceExtendedDetailResponse
func (c *ClientWithResponses) ReadSingleDeviceExtendedDetailWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleDeviceExtendedDetailResponse, error) {
	rsp, err := c.ReadSingleDeviceExtendedDetail(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleDeviceExtendedDetailResponse(rsp)
}

// ReadSingleDeviceDetailsWithResponse request returning *ReadSingleDeviceDetailsResponse
func (c *ClientWithResponses) ReadSingleDeviceDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleDeviceDetailsResponse, error) {
	rsp, err := c.ReadSingleDeviceDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleDeviceDetailsResponse(rsp)
}

// ReadMultipleDeviceInfoWithResponse request returning *ReadMultipleDeviceInfoResponse
func (c *ClientWithResponses) ReadMultipleDeviceInfoWithResponse(ctx context.Context, params *ReadMultipleDeviceInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceInfoResponse, error) {
	rsp, err := c.ReadMultipleDeviceInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleDeviceInfoResponse(rsp)
}

// ReadSingleDeviceInfoWithResponse request returning *ReadSingleDeviceInfoResponse
func (c *ClientWithResponses) ReadSingleDeviceInfoWithResponse(ctx context.Context, id string, params *ReadSingleDeviceInfoParams, reqEditors ...RequestEditorFn) (*ReadSingleDeviceInfoResponse, error) {
	rsp, err := c.ReadSingleDeviceInfo(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleDeviceInfoResponse(rsp)
}

// ReadMultipleDeviceLifecycleWithResponse request returning *ReadMultipleDeviceLifecycleResponse
func (c *ClientWithResponses) ReadMultipleDeviceLifecycleWithResponse(ctx context.Context, params *ReadMultipleDeviceLifecycleParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceLifecycleResponse, error) {
	rsp, err := c.ReadMultipleDeviceLifecycle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleDeviceLifecycleResponse(rsp)
}

// ReadSingleDeviceLifecycleWithResponse request returning *ReadSingleDeviceLifecycleResponse
func (c *ClientWithResponses) ReadSingleDeviceLifecycleWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleDeviceLifecycleResponse, error) {
	rsp, err := c.ReadSingleDeviceLifecycle(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleDeviceLifecycleResponse(rsp)
}

// ReadMultipleDeviceWarrantyWithResponse request returning *ReadMultipleDeviceWarrantyResponse
func (c *ClientWithResponses) ReadMultipleDeviceWarrantyWithResponse(ctx context.Context, params *ReadMultipleDeviceWarrantyParams, reqEditors ...RequestEditorFn) (*ReadMultipleDeviceWarrantyResponse, error) {
	rsp, err := c.ReadMultipleDeviceWarranty(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleDeviceWarrantyResponse(rsp)
}

// ReadSingleDeviceWarrantyWithResponse request returning *ReadSingleDeviceWarrantyResponse
func (c *ClientWithResponses) ReadSingleDeviceWarrantyWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleDeviceWarrantyResponse, error) {
	rsp, err := c.ReadSingleDeviceWarranty(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleDeviceWarrantyResponse(rsp)
}

// ReadMultipleEntityAuditWithResponse request returning *ReadMultipleEntityAuditResponse
func (c *ClientWithResponses) ReadMultipleEntityAuditWithResponse(ctx context.Context, params *ReadMultipleEntityAuditParams, reqEditors ...RequestEditorFn) (*ReadMultipleEntityAuditResponse, error) {
	rsp, err := c.ReadMultipleEntityAudit(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleEntityAuditResponse(rsp)
}

// ReadSingleEntityAuditWithResponse request returning *ReadSingleEntityAuditResponse
func (c *ClientWithResponses) ReadSingleEntityAuditWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleEntityAuditResponse, error) {
	rsp, err := c.ReadSingleEntityAudit(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleEntityAuditResponse(rsp)
}

// ReadMultipleEntityNoteWithResponse request returning *ReadMultipleEntityNoteResponse
func (c *ClientWithResponses) ReadMultipleEntityNoteWithResponse(ctx context.Context, params *ReadMultipleEntityNoteParams, reqEditors ...RequestEditorFn) (*ReadMultipleEntityNoteResponse, error) {
	rsp, err := c.ReadMultipleEntityNote(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleEntityNoteResponse(rsp)
}

// ReadSingleEntityNoteWithResponse request returning *ReadSingleEntityNoteResponse
func (c *ClientWithResponses) ReadSingleEntityNoteWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleEntityNoteResponse, error) {
	rsp, err := c.ReadSingleEntityNote(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleEntityNoteResponse(rsp)
}

// ReadMultipleInterfaceInfoWithResponse request returning *ReadMultipleInterfaceInfoResponse
func (c *ClientWithResponses) ReadMultipleInterfaceInfoWithResponse(ctx context.Context, params *ReadMultipleInterfaceInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleInterfaceInfoResponse, error) {
	rsp, err := c.ReadMultipleInterfaceInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleInterfaceInfoResponse(rsp)
}

// ReadSingleInterfaceInfoWithResponse request returning *ReadSingleInterfaceInfoResponse
func (c *ClientWithResponses) ReadSingleInterfaceInfoWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleInterfaceInfoResponse, error) {
	rsp, err := c.ReadSingleInterfaceInfo(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleInterfaceInfoResponse(rsp)
}

// ReadMultipleNetworkDetailsWithResponse request returning *ReadMultipleNetworkDetailsResponse
func (c *ClientWithResponses) ReadMultipleNetworkDetailsWithResponse(ctx context.Context, params *ReadMultipleNetworkDetailsParams, reqEditors ...RequestEditorFn) (*ReadMultipleNetworkDetailsResponse, error) {
	rsp, err := c.ReadMultipleNetworkDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleNetworkDetailsResponse(rsp)
}

// ReadSingleNetworkDetailsWithResponse request returning *ReadSingleNetworkDetailsResponse
func (c *ClientWithResponses) ReadSingleNetworkDetailsWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*ReadSingleNetworkDetailsResponse, error) {
	rsp, err := c.ReadSingleNetworkDetails(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleNetworkDetailsResponse(rsp)
}

// ReadMultipleNetworkInfoWithResponse request returning *ReadMultipleNetworkInfoResponse
func (c *ClientWithResponses) ReadMultipleNetworkInfoWithResponse(ctx context.Context, params *ReadMultipleNetworkInfoParams, reqEditors ...RequestEditorFn) (*ReadMultipleNetworkInfoResponse, error) {
	rsp, err := c.ReadMultipleNetworkInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleNetworkInfoResponse(rsp)
}

// ReadSingleNetworkInfoWithResponse request returning *ReadSingleNetworkInfoResponse
func (c *ClientWithResponses) ReadSingleNetworkInfoWithResponse(ctx context.Context, id string, params *ReadSingleNetworkInfoParams, reqEditors ...RequestEditorFn) (*ReadSingleNetworkInfoResponse, error) {
	rsp, err := c.ReadSingleNetworkInfo(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleNetworkInfoResponse(rsp)
}

// ReadMultipleSnmpPollerSettingsWithResponse request returning *ReadMultipleSnmpPollerSettingsResponse
func (c *ClientWithResponses) ReadMultipleSnmpPollerSettingsWithResponse(ctx context.Context, params *ReadMultipleSnmpPollerSettingsParams, reqEditors ...RequestEditorFn) (*ReadMultipleSnmpPollerSettingsResponse, error) {
	rsp, err := c.ReadMultipleSnmpPollerSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleSnmpPollerSettingsResponse(rsp)
}

// ReadSnmpPollerSettingSingleWithResponse request returning *ReadSnmpPollerSettingSingleResponse
func (c *ClientWithResponses) ReadSnmpPollerSettingSingleWithResponse(ctx context.Context, snmpPollerSettingId string, reqEditors ...RequestEditorFn) (*ReadSnmpPollerSettingSingleResponse, error) {
	rsp, err := c.ReadSnmpPollerSettingSingle(ctx, snmpPollerSettingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSnmpPollerSettingSingleResponse(rsp)
}

// ReadMultipleSnmpPollerSettingDevicesWithResponse request returning *ReadMultipleSnmpPollerSettingDevicesResponse
func (c *ClientWithResponses) ReadMultipleSnmpPollerSettingDevicesWithResponse(ctx context.Context, snmpPollerSettingId string, params *ReadMultipleSnmpPollerSettingDevicesParams, reqEditors ...RequestEditorFn) (*ReadMultipleSnmpPollerSettingDevicesResponse, error) {
	rsp, err := c.ReadMultipleSnmpPollerSettingDevices(ctx, snmpPollerSettingId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleSnmpPollerSettingDevicesResponse(rsp)
}

// ReadComponentStatisticsWithResponse request returning *ReadComponentStatisticsResponse
func (c *ClientWithResponses) ReadComponentStatisticsWithResponse(ctx context.Context, componentType ReadComponentStatisticsParamsComponentType, statId ReadComponentStatisticsParamsStatId, params *ReadComponentStatisticsParams, reqEditors ...RequestEditorFn) (*ReadComponentStatisticsResponse, error) {
	rsp, err := c.ReadComponentStatistics(ctx, componentType, statId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadComponentStatisticsResponse(rsp)
}

// ReadDeviceStatisticsWithResponse request returning *ReadDeviceStatisticsResponse
func (c *ClientWithResponses) ReadDeviceStatisticsWithResponse(ctx context.Context, statId ReadDeviceStatisticsParamsStatId, params *ReadDeviceStatisticsParams, reqEditors ...RequestEditorFn) (*ReadDeviceStatisticsResponse, error) {
	rsp, err := c.ReadDeviceStatistics(ctx, statId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadDeviceStatisticsResponse(rsp)
}

// ReadDeviceAvailabilityStatisticsWithResponse request returning *ReadDeviceAvailabilityStatisticsResponse
func (c *ClientWithResponses) ReadDeviceAvailabilityStatisticsWithResponse(ctx context.Context, statId ReadDeviceAvailabilityStatisticsParamsStatId, params *ReadDeviceAvailabilityStatisticsParams, reqEditors ...RequestEditorFn) (*ReadDeviceAvailabilityStatisticsResponse, error) {
	rsp, err := c.ReadDeviceAvailabilityStatistics(ctx, statId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadDeviceAvailabilityStatisticsResponse(rsp)
}

// ReadInterfaceStatisticsWithResponse request returning *ReadInterfaceStatisticsResponse
func (c *ClientWithResponses) ReadInterfaceStatisticsWithResponse(ctx context.Context, statId ReadInterfaceStatisticsParamsStatId, params *ReadInterfaceStatisticsParams, reqEditors ...RequestEditorFn) (*ReadInterfaceStatisticsResponse, error) {
	rsp, err := c.ReadInterfaceStatistics(ctx, statId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadInterfaceStatisticsResponse(rsp)
}

// ReadOidStatisticsWithResponse request returning *ReadOidStatisticsResponse
func (c *ClientWithResponses) ReadOidStatisticsWithResponse(ctx context.Context, statId ReadOidStatisticsParamsStatId, params *ReadOidStatisticsParams, reqEditors ...RequestEditorFn) (*ReadOidStatisticsResponse, error) {
	rsp, err := c.ReadOidStatistics(ctx, statId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadOidStatisticsResponse(rsp)
}

// ReadServiceStatisticsWithResponse request returning *ReadServiceStatisticsResponse
func (c *ClientWithResponses) ReadServiceStatisticsWithResponse(ctx context.Context, statId ReadServiceStatisticsParamsStatId, params *ReadServiceStatisticsParams, reqEditors ...RequestEditorFn) (*ReadServiceStatisticsResponse, error) {
	rsp, err := c.ReadServiceStatistics(ctx, statId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadServiceStatisticsResponse(rsp)
}

// ReadMultipleSnmpPollerSettingIntHistoryWithResponse request returning *ReadMultipleSnmpPollerSettingIntHistoryResponse
func (c *ClientWithResponses) ReadMultipleSnmpPollerSettingIntHistoryWithResponse(ctx context.Context, params *ReadMultipleSnmpPollerSettingIntHistoryParams, reqEditors ...RequestEditorFn) (*ReadMultipleSnmpPollerSettingIntHistoryResponse, error) {
	rsp, err := c.ReadMultipleSnmpPollerSettingIntHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleSnmpPollerSettingIntHistoryResponse(rsp)
}

// ReadMultipleSnmpPollerSettingStringHistoryWithResponse request returning *ReadMultipleSnmpPollerSettingStringHistoryResponse
func (c *ClientWithResponses) ReadMultipleSnmpPollerSettingStringHistoryWithResponse(ctx context.Context, params *ReadMultipleSnmpPollerSettingStringHistoryParams, reqEditors ...RequestEditorFn) (*ReadMultipleSnmpPollerSettingStringHistoryResponse, error) {
	rsp, err := c.ReadMultipleSnmpPollerSettingStringHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleSnmpPollerSettingStringHistoryResponse(rsp)
}

// ReadMultipleTenantsWithResponse request returning *ReadMultipleTenantsResponse
func (c *ClientWithResponses) ReadMultipleTenantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadMultipleTenantsResponse, error) {
	rsp, err := c.ReadMultipleTenants(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleTenantsResponse(rsp)
}

// ReadMultipleTenantsDetailWithResponse request returning *ReadMultipleTenantsDetailResponse
func (c *ClientWithResponses) ReadMultipleTenantsDetailWithResponse(ctx context.Context, params *ReadMultipleTenantsDetailParams, reqEditors ...RequestEditorFn) (*ReadMultipleTenantsDetailResponse, error) {
	rsp, err := c.ReadMultipleTenantsDetail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadMultipleTenantsDetailResponse(rsp)
}

// ReadSingleTenantsDetailWithResponse request returning *ReadSingleTenantsDetailResponse
func (c *ClientWithResponses) ReadSingleTenantsDetailWithResponse(ctx context.Context, id string, params *ReadSingleTenantsDetailParams, reqEditors ...RequestEditorFn) (*ReadSingleTenantsDetailResponse, error) {
	rsp, err := c.ReadSingleTenantsDetail(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadSingleTenantsDetailResponse(rsp)
}

// ParseAlertDismissSingleResponse parses an HTTP response from a AlertDismissSingleWithResponse call
func ParseAlertDismissSingleResponse(rsp *http.Response) (*AlertDismissSingleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AlertDismissSingleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	}

	return response, nil
}

// ParseReadMultipleAlertInfoResponse parses an HTTP response from a ReadMultipleAlertInfoWithResponse call
func ParseReadMultipleAlertInfoResponse(rsp *http.Response) (*ReadMultipleAlertInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleAlertInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertHistoryInfoReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleAlertInfoResponse parses an HTTP response from a ReadSingleAlertInfoWithResponse call
func ParseReadSingleAlertInfoResponse(rsp *http.Response) (*ReadSingleAlertInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleAlertInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertHistoryInfoReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseVerifyCredentialsResponse parses an HTTP response from a VerifyCredentialsWithResponse call
func ParseVerifyCredentialsResponse(rsp *http.Response) (*VerifyCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseReadClientUsageResponse parses an HTTP response from a ReadClientUsageWithResponse call
func ParseReadClientUsageResponse(rsp *http.Response) (*ReadClientUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadClientUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientUsageRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadDeviceUsageResponse parses an HTTP response from a ReadDeviceUsageWithResponse call
func ParseReadDeviceUsageResponse(rsp *http.Response) (*ReadDeviceUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadDeviceUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceUsageRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleComponentInfoResponse parses an HTTP response from a ReadMultipleComponentInfoWithResponse call
func ParseReadMultipleComponentInfoResponse(rsp *http.Response) (*ReadMultipleComponentInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleComponentInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComponentInfoReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleComponentInfoResponse parses an HTTP response from a ReadSingleComponentInfoWithResponse call
func ParseReadSingleComponentInfoResponse(rsp *http.Response) (*ReadSingleComponentInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleComponentInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComponentInfoReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleConfigurationsResponse parses an HTTP response from a ReadMultipleConfigurationsWithResponse call
func ParseReadMultipleConfigurationsResponse(rsp *http.Response) (*ReadMultipleConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleConfigurationResponse parses an HTTP response from a ReadSingleConfigurationWithResponse call
func ParseReadSingleConfigurationResponse(rsp *http.Response) (*ReadSingleConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfigReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleDeviceDetailsResponse parses an HTTP response from a ReadMultipleDeviceDetailsWithResponse call
func ParseReadMultipleDeviceDetailsResponse(rsp *http.Response) (*ReadMultipleDeviceDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleDeviceDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceDetailsReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleDeviceExtendedDetailResponse parses an HTTP response from a ReadMultipleDeviceExtendedDetailWithResponse call
func ParseReadMultipleDeviceExtendedDetailResponse(rsp *http.Response) (*ReadMultipleDeviceExtendedDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleDeviceExtendedDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceDetailsExtendedReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleDeviceExtendedDetailResponse parses an HTTP response from a ReadSingleDeviceExtendedDetailWithResponse call
func ParseReadSingleDeviceExtendedDetailResponse(rsp *http.Response) (*ReadSingleDeviceExtendedDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleDeviceExtendedDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceDetailsExtendedReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleDeviceDetailsResponse parses an HTTP response from a ReadSingleDeviceDetailsWithResponse call
func ParseReadSingleDeviceDetailsResponse(rsp *http.Response) (*ReadSingleDeviceDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleDeviceDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceDetailsReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleDeviceInfoResponse parses an HTTP response from a ReadMultipleDeviceInfoWithResponse call
func ParseReadMultipleDeviceInfoResponse(rsp *http.Response) (*ReadMultipleDeviceInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleDeviceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceInfoReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleDeviceInfoResponse parses an HTTP response from a ReadSingleDeviceInfoWithResponse call
func ParseReadSingleDeviceInfoResponse(rsp *http.Response) (*ReadSingleDeviceInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleDeviceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceInfoReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleDeviceLifecycleResponse parses an HTTP response from a ReadMultipleDeviceLifecycleWithResponse call
func ParseReadMultipleDeviceLifecycleResponse(rsp *http.Response) (*ReadMultipleDeviceLifecycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleDeviceLifecycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceLifecycleReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleDeviceLifecycleResponse parses an HTTP response from a ReadSingleDeviceLifecycleWithResponse call
func ParseReadSingleDeviceLifecycleResponse(rsp *http.Response) (*ReadSingleDeviceLifecycleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleDeviceLifecycleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceLifecycleReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleDeviceWarrantyResponse parses an HTTP response from a ReadMultipleDeviceWarrantyWithResponse call
func ParseReadMultipleDeviceWarrantyResponse(rsp *http.Response) (*ReadMultipleDeviceWarrantyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleDeviceWarrantyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceWarrantyReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleDeviceWarrantyResponse parses an HTTP response from a ReadSingleDeviceWarrantyWithResponse call
func ParseReadSingleDeviceWarrantyResponse(rsp *http.Response) (*ReadSingleDeviceWarrantyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleDeviceWarrantyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceWarrantyReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleEntityAuditResponse parses an HTTP response from a ReadMultipleEntityAuditWithResponse call
func ParseReadMultipleEntityAuditResponse(rsp *http.Response) (*ReadMultipleEntityAuditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleEntityAuditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityAuditReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleEntityAuditResponse parses an HTTP response from a ReadSingleEntityAuditWithResponse call
func ParseReadSingleEntityAuditResponse(rsp *http.Response) (*ReadSingleEntityAuditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleEntityAuditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityAuditReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleEntityNoteResponse parses an HTTP response from a ReadMultipleEntityNoteWithResponse call
func ParseReadMultipleEntityNoteResponse(rsp *http.Response) (*ReadMultipleEntityNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleEntityNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityNotesReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleEntityNoteResponse parses an HTTP response from a ReadSingleEntityNoteWithResponse call
func ParseReadSingleEntityNoteResponse(rsp *http.Response) (*ReadSingleEntityNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleEntityNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityNotesReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleInterfaceInfoResponse parses an HTTP response from a ReadMultipleInterfaceInfoWithResponse call
func ParseReadMultipleInterfaceInfoResponse(rsp *http.Response) (*ReadMultipleInterfaceInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleInterfaceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterfaceInfoReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleInterfaceInfoResponse parses an HTTP response from a ReadSingleInterfaceInfoWithResponse call
func ParseReadSingleInterfaceInfoResponse(rsp *http.Response) (*ReadSingleInterfaceInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleInterfaceInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterfaceInfoReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleNetworkDetailsResponse parses an HTTP response from a ReadMultipleNetworkDetailsWithResponse call
func ParseReadMultipleNetworkDetailsResponse(rsp *http.Response) (*ReadMultipleNetworkDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleNetworkDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkDetailsReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleNetworkDetailsResponse parses an HTTP response from a ReadSingleNetworkDetailsWithResponse call
func ParseReadSingleNetworkDetailsResponse(rsp *http.Response) (*ReadSingleNetworkDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleNetworkDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkDetailsReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleNetworkInfoResponse parses an HTTP response from a ReadMultipleNetworkInfoWithResponse call
func ParseReadMultipleNetworkInfoResponse(rsp *http.Response) (*ReadMultipleNetworkInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleNetworkInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkInfoReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleNetworkInfoResponse parses an HTTP response from a ReadSingleNetworkInfoWithResponse call
func ParseReadSingleNetworkInfoResponse(rsp *http.Response) (*ReadSingleNetworkInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleNetworkInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkInfoReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleSnmpPollerSettingsResponse parses an HTTP response from a ReadMultipleSnmpPollerSettingsWithResponse call
func ParseReadMultipleSnmpPollerSettingsResponse(rsp *http.Response) (*ReadMultipleSnmpPollerSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleSnmpPollerSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnmpPollerSettingsRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSnmpPollerSettingSingleResponse parses an HTTP response from a ReadSnmpPollerSettingSingleWithResponse call
func ParseReadSnmpPollerSettingSingleResponse(rsp *http.Response) (*ReadSnmpPollerSettingSingleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSnmpPollerSettingSingleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnmpPollerSettingSingleRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleSnmpPollerSettingDevicesResponse parses an HTTP response from a ReadMultipleSnmpPollerSettingDevicesWithResponse call
func ParseReadMultipleSnmpPollerSettingDevicesResponse(rsp *http.Response) (*ReadMultipleSnmpPollerSettingDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleSnmpPollerSettingDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnmpPollerSettingDevicesRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadComponentStatisticsResponse parses an HTTP response from a ReadComponentStatisticsWithResponse call
func ParseReadComponentStatisticsResponse(rsp *http.Response) (*ReadComponentStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadComponentStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComponentStatisticsRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadDeviceStatisticsResponse parses an HTTP response from a ReadDeviceStatisticsWithResponse call
func ParseReadDeviceStatisticsResponse(rsp *http.Response) (*ReadDeviceStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadDeviceStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceStatisticsRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadDeviceAvailabilityStatisticsResponse parses an HTTP response from a ReadDeviceAvailabilityStatisticsWithResponse call
func ParseReadDeviceAvailabilityStatisticsResponse(rsp *http.Response) (*ReadDeviceAvailabilityStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadDeviceAvailabilityStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceAvailabilityStatisticsRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadInterfaceStatisticsResponse parses an HTTP response from a ReadInterfaceStatisticsWithResponse call
func ParseReadInterfaceStatisticsResponse(rsp *http.Response) (*ReadInterfaceStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadInterfaceStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InterfaceStatisticsRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadOidStatisticsResponse parses an HTTP response from a ReadOidStatisticsWithResponse call
func ParseReadOidStatisticsResponse(rsp *http.Response) (*ReadOidStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadOidStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceOidMonitorRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadServiceStatisticsResponse parses an HTTP response from a ReadServiceStatisticsWithResponse call
func ParseReadServiceStatisticsResponse(rsp *http.Response) (*ReadServiceStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadServiceStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceStatisticsRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleSnmpPollerSettingIntHistoryResponse parses an HTTP response from a ReadMultipleSnmpPollerSettingIntHistoryWithResponse call
func ParseReadMultipleSnmpPollerSettingIntHistoryResponse(rsp *http.Response) (*ReadMultipleSnmpPollerSettingIntHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleSnmpPollerSettingIntHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnmpPollerIntHistoryRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleSnmpPollerSettingStringHistoryResponse parses an HTTP response from a ReadMultipleSnmpPollerSettingStringHistoryWithResponse call
func ParseReadMultipleSnmpPollerSettingStringHistoryResponse(rsp *http.Response) (*ReadMultipleSnmpPollerSettingStringHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleSnmpPollerSettingStringHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnmpPollerStringHistoryRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleTenantsResponse parses an HTTP response from a ReadMultipleTenantsWithResponse call
func ParseReadMultipleTenantsResponse(rsp *http.Response) (*ReadMultipleTenantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleTenantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserTenantsReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadMultipleTenantsDetailResponse parses an HTTP response from a ReadMultipleTenantsDetailWithResponse call
func ParseReadMultipleTenantsDetailResponse(rsp *http.Response) (*ReadMultipleTenantsDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadMultipleTenantsDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantsDetailReadMultiple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}

// ParseReadSingleTenantsDetailResponse parses an HTTP response from a ReadSingleTenantsDetailWithResponse call
func ParseReadSingleTenantsDetailResponse(rsp *http.Response) (*ReadSingleTenantsDetailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadSingleTenantsDetailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TenantsDetailReadSingle
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest BasicError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationvndApiJSON404 = &dest

	}

	return response, nil
}
